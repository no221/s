function obfuscate(source, VarName, WaterMark)
    warn("Started obfuscate")
    local Variable = VarName or "Taurus_"
    local WM

    if source == nil then
        source = [[print("Hello World!")]]
    end

    local ticks = tick()

    if typeof(WaterMark) == "string" and WaterMark ~= nil then
        WM = "    " .. tostring(WaterMark) .. " | Secured by ???"
    else
        WM = "    WaterMark | Secured by ???"
    end

    WM = "--[[" .. "\n" .. WM .. "\n" .. "]]--" .. "\n\n"

    local function random_(length)
        local letters = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}
        local code
        if math.random(1,2) == 1 then
            code = letters[math.random(1, #letters)]
        else
            code = string.upper(letters[math.random(1, #letters)])
        end
        for i = 1, tonumber(length) do
            if math.random(1,2) == 1 then
                local char = letters[math.random(1, #letters)]
                if math.random(1,2) == 1 then
                    code = code .. string.upper(char)
                else
                    code = code .. char
                end
            else
                code = code .. tostring(math.random(0,9))
            end
        end
        return code
    end

    local function StringToBinary(str)
        local result = {}
        for i = 1, #str do
            local byte = str:byte(i)
            local bin = ""
            while byte > 0 do
                bin = tostring(byte % 2) .. bin
                byte = math.floor(byte / 2)
            end
            table.insert(result, string.rep("0", 8 - #bin) .. bin)
        end
        return table.concat(result, " ")
    end

    local function add_binary(number, s)
        local topics = {
            "Deobfuscate?",
            "Hello World!",
            "IronBrew Fork? Nope.",
            "PSU Fork? Nope.",
            "Touch some grass",
            "New update when?",
            "GhostyDuckyy",
            "Free obfuscator!",
            "Reverse engineering?",
            "25ms",
            "Nah",
            "How",
            "E",
            "Totally not sus",
            "Nice try, lol",
            "Try harder!",
            "Obfuscation magic",
            "Decompiled? Cope.",
            "Eval gang",
            "Where's the sauce?",
            "404: Logic not found",
            "You wish",
            "Lua wizardry",
            "Bitecode moment",
            "Good luck, bro",
            "Why tho?",
            "Console.log('cry')",
            "Skill issue",
            "Guess again",
            "Keep dreaming",
            "U wot m8",
            "Smells like paste",
            "Stack overflowed",
            "Oopsie",
            "Catch me if u can",
            "Alt+F4 for hints",
            "Trust the process",
            "Glitch in the matrix",
            "Not even close",
            "Encrypted by ducks",
            "Duck obfuscation",
            "Bytecode is love",
            "Obfuscate. Dominate.",
            "Mother of all forks",
            "U mad?",
            "Insert witty phrase",
            "Ctrl+C, Ctrl+V pro",
            "Scrambled eggs logic",
            "Certified hood classic",
            "Did you try praying?",
            "lolnope",
            "ChatGPT said no",
            "False sense of hope",
            "Lurking variables",
            "This ain't it chief",
            "Read the docs maybe?",
            "Tea, not coffee",
            "Too deep",
            "Wow, so original",
	"Keep trying, Sherlock",
	"10/10 effort, 0/10 results",
	"Almost had it… not really",
	"Must be magic",
	"Yup, totally readable",
	"Oops, all encryption!",
	"Definitely not a waste of time",
	"Still easier than your code",
	"Should've used ChatGPT",
	"404: Your skills not found",
	"Because why not?",
	"U solved it? In your dreams",
	"Obfuscated to perfection",
	"Lua? More like LUL",
	"Certified brain damage",
	"Trust me bro, it works",
	"Nice guess, wrong again",
	"Please stop crying",
	"Source code sold separately",
	"Just decrypt it, right?",
	"You're in too deep",
	"Your debugger left the chat",
	"This ain't JavaScript",
	"You and what brain?",
	"Congratulations, it's a mess!",
	"Skill check failed",
	"Try StackOverflow maybe?",
	"It's not a bug, it's a feature",
	"Debug harder, not smarter",
	"Did you mean 'give up'?",
	"Yes, it's spaghetti",
	"Totally readable, right?",
	"Best viewed with sunglasses",
	"Unravel this, wizard",
	"100% developer tears",
	"Should’ve gone outside",
	"Obfuscation sponsored by chaos",
	"You're gonna hate this",
	"Built different (and broken)",
	"Insert smart quote here",
	"Still better than Minified JS",
	"Good luck, you’ll need it",
	"Advanced trolling technology",
            random_(math.random(50,150)),
        }
        for i = 1, tonumber(number) do
            local topic = topics[math.random(1, #topics)]
            local dummy = "local " .. Variable .. random_(math.random(10,12)) .. " = \"" .. StringToBinary(topic) .. "\"; "
            s = s .. dummy
        end
        return s
    end

    local Random_Variable = {
        TableByte = random_(math.random(15,20)),
        Table_concat = random_(math.random(15,20)),
        Loadstring = random_(math.random(15,20)),
        DummyFunc = random_(math.random(15,20)),
        UnusedVar = random_(math.random(15,20)),
    }

    local troll_func = "function() " .. add_binary(math.random(30,50), "") .. " end"
    local troll_var = "local " .. Variable .. random_(math.random(15,20)) .. " = " .. troll_func

    local SourceByte = ""
    for i = 1, #source do
        SourceByte = SourceByte .. "\"\\" .. string.byte(source, i) .. "\", "
    end
    local TableByte = "local " .. Variable .. Random_Variable.TableByte .. " = {" .. SourceByte .. "}"

    local Loadstring = "local " .. Variable .. Random_Variable.Loadstring .. " = loadstring(table.concat({\"\\114\", \"\\101\", \"\\116\", \"\\117\", \"\\114\", \"\\110\", \" \\102\", \"\\117\", \"\\110\", \"\\99\", \"\\116\", \"\\105\", \"\\111\", \"\\110\", \"\\32\", \"\\98\", \"\\121\", \"\\116\", \"\\101\"}))()"
    local func = {
        Variable .. Random_Variable.Loadstring,
        Variable .. Random_Variable.TableByte,
    }

    local function fake_code(number, r)
        local parts = {}
        for i = 1, tonumber(number) do
            local create_Var = Variable .. random_(math.random(15,20))
            local randStr = ""
            if r then
                randStr = "return " .. random_(tonumber(r))
            else
                randStr = "return " .. random_(math.floor(#source / 2))
            end
            local byteStr = ""
            for j = 1, #randStr do
                byteStr = byteStr .. "\"\\" .. string.byte(randStr, j) .. "\", "
            end
            local fake = "local " .. create_Var .. " = {" .. byteStr .. "}; local " .. create_Var .. " = " .. func[1] .. "(" .. create_Var .. "); "
            table.insert(parts, fake)
        end
        return table.concat(parts, " ")
    een
    local dummy_code = ""
    for i = 1, math.random(3,6) do
        local dummyFunc = "local function " .. Variable .. random_(math.random(10,15)) .. "() " ..
                          "local " .. Variable .. random_(math.random(5)) .. " = " .. random_(math.random(10,20)) .. "; " ..
                          "if false then " .. random_(math.random(5,10)) .. " end " ..
                          "end; "
        dummy_code = dummy_code .. dummyFunc
    end

    local obfuscated = WM ..
                         troll_var .. "; " ..
                         Loadstring .. "; " ..
                         fake_code(math.random(2,4), math.random(400,600)) ..
                         dummy_code .. TableByte .. "; " ..
                         "local " .. Variable .. random_(math.random(15,20)) .. " = " .. func[1] .. "(" .. func[2] .. "); " ..
                         fake_code(math.random(2,4), math.random(math.floor(#source / 2), #source * 2))
    if #obfuscated > 1000 then
        writefile("obfuscated_code.lua", obfuscated)
        warn("Writen into file")
    else
writefile("obfuscated_code.lua", obfuscated)
        warn("Also Writen into your workspace.")
    end

    warn("Done obfuscate in " .. tostring(tick() - ticks) .. " second")
    return
end

return function(source, CustomVarName, WaterMark)
    task.spawn(function()
        obfuscate(source, CustomVarName, WaterMark)
    end)
end
